X0011
1. Zakresem zainteresowania inżynierii oprogramowania jest:
eksploatacja oprogramowania
handel oprogramowaniem
wytwarzanie oprogramowania
pielęgnacja oprogramowania

X0100
2. Okres od powstania koncepcji oprogramowania do wycofania oprogramowania jest nazywany:
życiem oprogramowania
cyklem życia oprogramowania
opracowaniem oprogramowania
dystrybucją oprogramowania

X0101
3. Produktem programowym jest:
system komputerowy wraz az oprogramowaniem
program komputerowy
proces wytwarzania
dokumentacja użytkownika

X1011
4. Specyfikacja wymagań powinna być:
jednoznaczna
niekompletna
weryfikowalna
śladowalna

X1100
5. Wymagania można opisać w postaci:
diagramów przypadków użycia 
w języku naturalnym
tablic decyzyjnych
notacji formalnej np. UML

X0010
6. Diagramu przypadków użycia UML używa się w celu:
prezentacji słownika systemowego
opisu wymagań niefunkcjonalnych
opisu wymagań funkcjonalnych
opisu budowy systemu

X1011
7. Dwa przypadki użycia mogą być połączone zależnością:
asocjacją
zależnością «import»
zależnością «extend» 
relacją generalizacji

X11101
8. Realizacja przypadków użycia może być definiowana:
jako tekstowy opis w j. naturalnym 
przez diagram aktywności
przez diagram klas
przez diagram przypadków użycia
przez diagram sekwencji

X1000
9. Opis zbioru obiektów, które posiadają te same atrybuty, operacje, jest nazywany:
klasą 
obiektem 
taksonomią
generalizacją

X111
10. Agregacja pełna (kompozycja) w UML:
to szczególny przypadek asocjacji
to relacja opisująca zależność strukturalną
jest oznaczana zamalowanym rombem

X1110
11. Stereotyp w j. UML to taki mechanizm, który:
może być zastosowany do dowolnego elementu modelu
uściśla semantykę pewnego elementu języka
rozszerza semantykę języka UML
jest instancją klasy

X1011
12. Przypadek użycia w UML:
jest usługą systemu
musi mieć nazwę i parametry
jest wywoływany przez aktora
jest opisywany diagramem aktywności

X111
13. Celem projektowania podsystemu jest:
dostarczenie poprawnego interfejsu własnego
zapewnienie poprawnej realizacji operacji, które dostarcza
niezależności podsystemu od innych podsystemów

X1111
14. Jaki rodzaj widzialności może być zdefiniowany dla klasy:
+ publiczna
- chroniona
~ pakietowa
# prywatna

X01011
15. Generalizacja może być zdefiniowana pomiędzy następującymi elementami UML:
asocjacjami
klasami
notatkami
aktorami
przypadkami użycia

X1111
16. Podstawowe dyscypliny procesu wytwarzania programowania to:
specyfikacja wymagań
konserwacja 
implementacja
testowanie

X0111
17. Diagram przypadków użycia jest grafem składającym się z:
klas
aktorów
asocjacji komunikacyjnej
przypadków użycia

X1000
18. W celu organizacji odpowiedzialności używa się w diagramach aktywności:
partycji
obiektów
przepływu sterowania
akcji

X0010
19. Klasa abstrakcyjna w UMLu:
nie ma metod
musi mieć co najmniej jeden atrybut
nie ma swoich instancji
jest interfejsem

X110
20. Agregacja w UML:
to szczególny przypadek asocjacji
to relacja opisująca zależność strukturalną
jest oznaczona zamalowanym rombem

X1101
21. W OCL predefiniowanymi typami kolekcyjnymi są:
Set
Bag
oclType
Sequence

X0011
22. Inwariant (niezmiennik) w OCL:
jest wyrażeniem arytmetycznym OCL
poprzedzony jest słowem context
poprzedzony jest słowem inv
dotyczy atrybutów

X1001
23. Diagram rozmieszczenia prezentuje:
węzły oraz ich połączenia
obiekty aktywne
odwzorowanie oprogramowania na platformę sprzętową
rozmieszczenie komponentów w węzłach

X11110
24. Inwariant (niezmiennik) w OCL:
jest wyrażeniem logicznym w OCL
definiuje się dla klasy/typu
poprzedzony jest słowem inv
dotyczy atrybutu klasy
poprzedzony jest słowem context

X011110
25. Przykładami operacji na kolekcjach OCL są:
empty
select
iterate
sum
size
collection

X0110
26. Realizacja przypadku użycia może być opisana:
diagramem przypadków użycia
diagramem sekwencji
słownie
diagramem stanów

X1111
27. Model projektowy:
pokazuje szczegóły implementacji
pokazuje poziomy architektury systemu
powinien być pielęgnowany
wykorzystuje wiele stereotypów

X1111
28. System zarządzania wersjami:
pozwala na cofanie zmian np. w kodzie
pozwala na dokonywanie przeglądów
automatycznie wersjonuje poprawione pliki
rozwiązuje konflikty w łączeniu plików

X0111
29. Projekt (przedsięwzięcie) informatyczne:
obejmuje rutynowy zestaw działań
jest ryzykowny
jego celem jest wytworzenie produktu usługi
ma określony czas trwania

X0110
30. Celem tworzenia prototypu interfejsu użytkownika jest:
realizacja diagramu klas
weryfikacja modelu przypadków użycia
okrywanie nowych wymagań użytkownika
modelowanie przepływu danych między użytkownikami

X0101
31. Które ze stwierdzenie pasują do zasad projektowania GUI należą:
maksymalizacja odcinków do pokonania kursora myszy oraz wzroku użytkownika
przycisk tabulatora pozwala na przechodzenie pomiędzy polami w logicznym porządku
nawigacja powinna odbywać się z lewej do prawej, od dołu w górę
interfejs powinien posiadać optymalną ilość elementów na ekranie

X0010
32. Diagram pokazujący wymianę komunikatów między obiektami to diagram:
stanu
wzorca architektonicznego
sekwencji
przypadków użycia

X1110
33. W których diagramach nie występują klasy:
diagram sekwencji
diagram przypadków użycia
diagram stanu
diagram klas

X10101
34. W OCL można definiować:
inwarianty dla klas obiektów
inwarianty dla operacji
warunki pre i post dla operacji
warunki pre i post dla atrybutów
specyfikację wyrażeń nawigacyjnych

X1110
35. Zakres testowania strukturalnego obejmuje:
testy pokrycia ścieżek programu
testy śledzenia wykonania
testy pokrycia kodu
testy efektywności

X10111
36. W OCL predefiniowanymi typami prostymi są:
String
Char 
Integer
Real
Boolean

X0111 
37. Wyróżnia się następujące klasy wzorców projektowych:
architektoniczne
strukturalne
zachowania (behawioralne)
kreacji obiektów

X111
38. Celem projektowania przypadku użycia jest:
identyfikacja klas, które w nim uczestniczą
rozdzielenie zachowania pomiędzy klasy
zdefiniowanie wymagań dotyczących operacji
rozpoznanie wymagań implementacyjnych

X1001
39. Zakres testowania funkcjonalnego obejmuje:
testy elementów interfejsu
testy pokrycia kodu
testy pokrycia odgałęzień
testy funkcji systemu

X0101
40. Metoda punktów funkcyjnych jest wykorzystywana do:
oceny jakości
szacowania kosztów
wykonywania przeglądów
oceny złożoności oprogramowania

X0100
41. Cykl życia oprogramowania zakładający, że aktywności wykonuje się sekwencyjnie, każdą po zakończeniu poprzedniej nazywa się:
modelem spiralnym
modelem kaskadowym (wodospadowym)
modelem prototypowania
modelem iteracyjnym

X1110
42. Diagram aktywności może być wykorzystany do prezentacji:
przepływu obiektów pomiędzy akcjami 
przepływu biznesowego (dziedzinowego)
scenariusza przypadku użycia
implementacji algorytmu

X0111
43. Pomiędzy klasami w UML mogą zachodzić następujące zależności i relacje:
enkapsulacji
realizacji
asocjacji
implementacji

X10011
44. Obiekt w UMLu:
jest modelem pewnego bytu z rzeczywistości
musi mieć nazwę
może być abstrakcyjny
może być anonimowy
jest instancją klasy

X0110
45. Diagram aktywności jest używany do:
pokazania obliczeń programu lub metod
modelowania przepływu prac w organizacji (procesów biznesowych)
opisu zachowań przypadku użycia
pokazania struktury komponentu

X1101
46. Wybierz prawdziwe zdania o asocjacjach:
asocjacja może mieć więcej niż dwa końce
specjalnym rodzajem asocjacji jest agregacja lub kompozycja
specjalnym rodzajem asocjacji jest generalizacja lub realizacja
asocjacja może być jednokierunkowa

X0101
47. Pomiędzy przypadkami użycia w UML mogą zachodzić zależności:
realizacji (inaczej implementacja)
generalizacji (czyli dziedziczenie)
<<entity>>
<<include>>

X01010
48. Ogólnie pomiędzy przypadkami użycia w UML mogą zachodzić zależności:
asocjacja
asocjacja z kierunkiem nawigacji
zależności: <<include>>, <<extend>>, <<refine>>
uogólnienie
realizacja

X011
49. Klasa asocjacji:
opisuje różne rodzaje zależności, które mogą istnieć między klasami
może mieć więcej niż dwa końce
dodaje atrybuty i/lub zachowanie do asocjacji zachodzącej między dwoma innymi klasami

X1110
50. Sukces projektu jest rozumiany jako osiągnięcie:
pożądanej jakości
dotrzymania kosztów
dotrzymania terminu
niezawodności oprogramowania

X10100
51. Formalny przegląd może przyjąć postać:
audytu
przejścia
inspekcji
kontroli
weryfikacji

X1011
52. Do metod szacowania kosztów przedsięwzięcia należą:
osąd eksperta
najmniejszego ryzyka
algorytmiczna
analogii

X00101
53. Celem projektowania klasy jest określenie:
instancji
zdarzenia, które klasa obsługuje
interfejsu klasy
komunikacji z innymi klasami
atrybutów klasy

X11111
54. Model projektowy zawiera:
model rozmieszczenia
realizację przypadków użycia
klasy projektowe
rozmieszczenia komponentów
podsystemy

X1011
55. Cechy i założenia procesu testowania:
powtarzalne
tylko poprawne dane
nie wiadomo, kiedy skończy
prowadzone przez osobę trzecią (nie autora)

X1111
56. Wzorzec projektowy:
jest przepisem na rozwiązanie typowego problemu
stosuje się na etapie implementacji
to np. proxy
może być kreacyjny

X0111
57. Implementacja oprogramowania:
obejmuje dwa podprocesy
efektem konstrukcji jest kod źródłowy
efektem integracji jest tzw. przyrost
obejmuje testowanie integracyjne

X1000
58. Jakie testowanie jest podstawą weryfikacji oprogramowania:
akceptacyjne
testowanie niezawodności
testowanie ścieżek programu
testowanie interfejsu użytkownika

X1111
59. Do podstawowych praktyk XP należą:
ciągłe testowanie
programowanie parami
refaktoryzacja (przerabianie kodu)
zarządzanie ryzykiem

X1110
60. Mechanizm analizy:
Jest wzorcem rozwiązania problemu
Jest niezwiązany z dziedziną problemu
Uwzględnia aspekt technologiczny
jest nim np. logowanie

X1010
61. Jak powinna wyglądać zależność pomiędzy stabilnością, abstrakcyjnością podsystemu?
podsystem powinien być równie stabilny jak i abstrakcyjny
podsystem powinien być równie niestabilny jak i abstrakcyjny
jeśli podsystem nie posiada zależności wychodzących, to najlepiej aby wszystkie klasy podsystemu były abstrakcyjne
jeśli podsystem nie posiada zależności wychodzących, to najlepiej aby wszystkie klasy podsystemu nie były abstrakcyjne

X0010
62. O czym mówi zasada zbiorowego wielokrotnego użycia:
interfejsy powinny być tworzone tak, aby nadawały się do wielokrotnego użytku przez różnych użytkowników
klasy podsystemu powinny być zbiorczo zamknięte dla jednego typu operacji
klasy, które są wielokrotnie razem używane powinny trafić do jednego podsystemu
w diagramie sekwencji należy ograniczy ilość powtarzalnych operacji na rzecz stosowania pętli

X1001
63. Testowanie akceptacyjne polega na:
weryfikacji czy system działa poprawnie
weryfikuje czy interfejsy są poprawnie zdefiniowane
ponowieniu wcześniejszy testów
walidacji czy system spełnia potrzeby użytkownika

X1000
64. Nieprawdziwymi stwierdzeniami na temat wzorca są:
wzorzec opisuje problem, który raz pojawił się w określonej dziedzinie.
wzorzec prezentuje rozwiązanie w sposób abstrakcyjny
wzorzec ukrywa szczegóły implementacyjne
wzorzec programowania dotyczy rozwiązań dla dowolnego języka

X0001
65. Celem diagramów stanów jest:
znalezienie cykli przejść stanów obiektu i ich usunięcie
utworzenie sekwencji wiadomości otrzymywanych przez instancję klasy
modelowanie historii życia klasy obiektu klasy
opis reakcji instancji na zdarzenia

X00101
66. Przypadek użycia:
jest to usługa w systemie niezależna od aktorów
podobnie jak klasa – może mieć swoją instancję
jest to konkretna sekwencja akcji aktora i konkretna sekwencja akcji systemu
rozpoczyna się od akcji systemu
jest wykonywany przez system

X1111
67. Język OCL jest językiem:
formalnym
typizowanym
pozwala zapisywać 3 rodzaje ograniczeń
powala opisać precyzyjniej semantykę diagramu klas

X0111
68. W procesie projektowania oprogramowania używa się:
stereotypów klas wynikających z platformy sprzętowej
klas projektowych "control", "entity" i "boundary"
mechanizmów generycznych
wzorców projektowych

X10110
69. Celem projektowania klasy jest określenie:
widoczności atrybutów i operacji
zdarzeń, które klasa obsługuje
operacji, które klasa wykonuje
interfejsu klasy
komunikacji z innymi klasami

X1100
70. Jakie jest oznaczenie i rola klas domenowych (entity) oraz klas sterujących (control) w UML?
klasy domenowe  - dla modelu relacyjnego; model danych, projekt bazy danych
klasy sterujące - decyzje powinny uwzględniać rozproszenie aplikacji, wymagania wydajnościowe, obsługa transakcji
klasy domenowe  - decyzje powinny uwzględniać rozproszenie aplikacji, wymagania wydajnościowe, obsługa transakcji
klasy sterujące - dla modelu relacyjnego; model danych, projekt bazy danych

X1110
71. Wzorzec projektowy:
ma nazwę, problem i sposób rozwiązania
umożliwia wielokrotne wykorzystanie rozwiązania
dotyczy pewnego poziomu abstrakcji problemu
wykorzystywany w fazie analizy

X1101
72. Czy poprawne składniowo są wyrażenia (flota jest kolekcją):
A. flota -> select (s: Samochod  | s.pojemsiln = 1300)
B. flota -> select (s			 | s.pojemsiln = 1300)
C. flota -> select (			   s.pojemsiln = 1300)
D. flota -> select (s 			 |   pojemsiln = 1300)

X1100
73. Czy poprawne są wyrażenia (osoba jest kolekcją; o : osoba)?
Osoba -> select(o 		 | o.wiek =  18)
Osoba -> select(o: Osoba | o.wiek =  18)
Osoba -> select(		     wiek == 18)
Osoba -> select(	       o.wiek == 18)

X11110
74. Które zapisy inwariantów sa poprawne składniowo?
context 	OSOBA inv: self.wiek >= 18
context 	OSOBA inv: 		wiek >= 18
context o: 	OSOBA inv: self.wiek >= 18
context o: 	OSOBA inv:    o.wiek >= 18
context 	OSOBA inv:    o.wiek >= 18

X110111
75. Przykładowymi elementami konfiguracji są:
kod wykonywalny
dokumentacja projektowa
dokumentacja użytkownika
kod źródłowy programu
dokumentacja produktu programowego
standardy, procedury, instrukcje

X1111
76. Przyrost kodu to:
efekt wykonywania iteracji
wykonywalna wersja systemu lub jego części
przetestowany przypadek użycia
rozbudowany kod źródłowy

X0111
77. W trakcie przygotowania i realizacji przedsięwzięcia powstają plany:
jakości
kosztów
przeglądów
wytwarzania oprogramowania

X10000
78. Jakość wewnętrzna jest opisywana przez własności produktu:
testowalność
łatwość użytkowania
niezawodność
ergonomię
zdolność funkcjonalną

X1011
79. Model cyklu życia:
opisuje procesy wykonywane podczas życia oprogramowania:
pozwala na określenie użyteczności procesów powstawania oprogramowania
wprowadza częściowy porządek („kolejność”) w wykonywanych procesach
definiuje kryteria rozpoczęcia i zakończenia procesów

X1111
80. Jaki rodzaj widzialności może być zdefiniowany dla elementów klasy:
+ publiczne
- chronione
~ pakietowe
# prywatne

X0101
81. Model statyczny systemu:
jest opisywany przez diagram stanów
jest reprezentowany m. in. przez diagram klas
opisuje dane systemu
opisuje architekturę systemu

X1110
82. W procesie Inżynierii wymagań: 
definiuje się potrzeby udziałowców
dokonuje się odkrywania wymagań
wytwarza się wizję systemu
wytwarza się  model biznesowy